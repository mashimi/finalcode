{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","target","rel","src","class","alt","id","this","props","account","width","height","Identicon","toString","Component","Footer","behavior","direction","Main","role","style","maxWidth","onSubmit","event","preventDefault","content","postContent","value","createPost","type","ref","input","placeholder","required","posts","map","post","key","author","window","web3","utils","fromWei","tipAmount","name","onClick","toWei","console","log","tipPost","App","state","socialNetwork","postCount","loading","bind","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","networkData","SocialNetwork","networks","Contract","abi","address","methods","call","i","sort","a","b","send","from","once","receipt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26cf270d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\n\n\nclass Navbar extends Component {\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n              <a\n                className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n                href=\"https://mashimi.dev\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              ><img src=\"./favicon.png\" class=\"rounded mx-auto d-block\" alt=\"logo\">\n                </img>Decentralized Message Platform\n              </a>\n              <ul className=\"navbar-nav px-3\">\n              <li className=\"nav-item text-nowrap d-sm-none d-sm-block\">\n                <small className=\"text-secondary\">\n                    <small id=\"account\">{this.props.account}</small>\n              </small>\n\n            { this.props.account\n             ? <img \n                className='ml-2'\n               width='30'\n               height='30'\n               alt=\"img\"\n\n               src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n               />\n               : <span></span>\n            }\n             \n              \n\n             \n              </li>\n             </ul>\n            </nav>\n            \n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\n\n\n\nclass Footer extends Component {\n\n    render() {\n        return (\n<footer>\n<marquee behavior=\"scroll\" direction=\"left\">“To suppress free speech is a double wrong. It violates the rights of the hearer as well as those of the speaker.” Frederick Douglass </marquee>\n\n</footer>\n            \n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\nimport Footer from \"./Footer\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"p\">\n          <div className=\"animation\">\n          <h1 class=\"panel-title\"></h1>\n    <p class=\"panel-text\">\n       \n    </p>      \n          </div>\n        </div>\n        <div className=\"row\">\n          <main\n            role=\"main\"\n            id=\"main\"\n            className=\"col-lg-12 ml-auto mr-auto\"\n            style={{ maxWidth: \"500px\" }}\n          >\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n\n              <form\n                onSubmit={event => {\n                  event.preventDefault();\n                  const content = this.postContent.value;\n                  this.props.createPost(content);\n                }}\n              >\n                <div className=\"form-group mr-sm-2\">\n                  <input\n                    id=\"postContent\"\n                    type=\"text\"\n                    ref={input => {\n                      this.postContent = input;\n                    }}\n                    className=\"form-control\"\n                    placeholder=\"What's on your mind?\"\n                    required\n                  />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                  Share\n                </button>\n              </form>\n              <p>&nbsp;</p>\n              {this.props.posts.map((post, key) => {\n                return (\n                  <div className=\"card mb-4\" key={key}>\n                    <div className=\"card-header\">\n                      <img\n                        alt=\"imag\"\n                        className=\"mr-2\"\n                        width=\"30\"\n                        height=\"30\"\n                        src={`data:image/png;base64,${new Identicon(\n                          post.author,\n                          30\n                        ).toString()}`}\n                      />\n                      <small className=\"text-muted\">{post.author}</small>\n                    </div>\n                    <ul id=\"postList\" className=\"list-group list-group-flush\">\n                      <li className=\"list-group-item\">\n                        <p>{post.content}</p>\n                      </li>\n                      <li key={key} className=\"list-group-item py-2\">\n                        <small className=\"float-left mt-1 text-muted\">\n                          TIPS:{\" \"}\n                          {window.web3.utils.fromWei(\n                            post.tipAmount.toString(),\n                            \"Ether\"\n                          )}{\" \"}\n                          ETH\n                        </small>\n                        <button\n                          className=\"btn btn-link btn-sm float-right pt-0\"\n                          name={post.id}\n                          onClick={event => {\n                            let tipAmount = window.web3.utils.toWei(\n                              \"0.1\",\n                              \"Ether\"\n                            );\n                            console.log(event.target.name, tipAmount);\n                            this.props.tipPost(event.target.name, tipAmount);\n                          }}\n                        >\n                          TIP 0.1 ETH\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                );\n              })}\n            </div>\n          </main>\n        </div>\n\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"," import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport ParticlesBackground from 'react-particles-js';\nimport './App.css';\nimport SocialNetwork from '../abis/SocialNetwork.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\n\nclass App extends Component {\n\n    \n  \n\n  \n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = SocialNetwork.networks[networkId]\n    if(networkData) {\n      const socialNetwork = web3.eth.Contract(SocialNetwork.abi, networkData.address)\n      this.setState({ socialNetwork })\n      const postCount = await socialNetwork.methods.postCount().call()\n      this.setState({ postCount })\n      // Load Posts\n      for (var i = 1; i <= postCount; i++) {\n        const post = await socialNetwork.methods.posts(i).call()\n        this.setState({\n          posts: [...this.state.posts, post]\n        })\n      }\n      // Sort posts. Show highest tipped posts first\n      this.setState({\n        posts: this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('SocialNetwork contract not deployed to detected network.')\n    }\n  }\n\n  createPost(content) {\n    this.setState({ loading: true })\n    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  tipPost(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      socialNetwork: null,\n      postCount: 0,\n      posts: [],\n      loading: true\n    }\n\n    this.createPost = this.createPost.bind(this)\n    this.tipPost = this.tipPost.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              posts={this.state.posts}\n              createPost={this.createPost}\n              tipPost={this.tipPost}\n            />\n        }\n        <ParticlesBackground ></ParticlesBackground>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}